name: Docker Image CI

on:
  push:
    branches: 
      - master

  workflow_dispatch: 

env:
  AWS_REGION: eu-west-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.REPO_NAME || 'artist-info' }}

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: setup sdk
        run: npm install aws-sdk

      - uses: actions/github-script@v5
        with:
          repository: aws-sdk
          script: |
            const AWS = require('aws-sdk')
            const cloudcontrol = new AWS.CloudControl()
            const { ECR_REPOSITORY } = process.env
            //const resource = `arn:aws:ecr:${AWS_REGION}:${account_id}:repository/${ECR_REPOSITORY}`

            return

            try {
              await cloudcontrol.getResource({
                "TypeName": "AWS::ECR::Repository",
                "Identifier": ECR_REPOSITORY
              }).promise()

            } catch (e) {
              // aws repo does not exist - create it

              const response = await cloudcontrol.createResource({
                TypeName: "AWS::ECR::Repository",
                DesiredState: `{
                  "RepositoryName": ${ECR_REPOSITORY},
                  "ImageTagMutability": "MUTABLE"
                }`
              }).promise()

              return response

            }

      - name: docker build
        id:   build-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
    